#!/bin/bash

# If mkosi.builddir/ exists mkosi will set $BUILDDIR to it, let's then use it as
# out-of-tree build dir. Otherwise, let's make up our own builddir.
[ -z "$BUILDDIR" ] && BUILDDIR=build

# After some inspection, we've noticed that:
# `pwd` is: /root/src
# $SRCDIR is: /root/src
# $DESTDIR is: /root/dest

# TODO: Can we use misc/make-path.sh here instead?
# The default that will get used automatically.
export GOPATH=~/go/

# The golang bins are stored here.
export GOBIN="${GOPATH}bin/"

# Needed so that golang build tools will get found.
export PATH="${GOBIN}:${PATH}"

# Define the golang dir for mgmt.
MGMTDIR="${GOPATH}src/github.com/purpleidea/mgmt/"

# Make the parent dir.
mkdir -p $(dirname $MGMTDIR)

# Move our code into it so that golang works.
mv "$SRCDIR" "$MGMTDIR"

# Work from that directory.
cd "$MGMTDIR"

# Arch mirror fixes.
if [ -e "/etc/arch-release" ]; then
	cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup
	# Enable all mirrors.
	sed -i 's/^#Server/Server/' /etc/pacman.d/mirrorlist.backup
	#rankmirrors -n 6 /etc/pacman.d/mirrorlist.backup > /etc/pacman.d/mirrorlist	# SLOW
	echo 'Server = http://mirror.rackspace.com/archlinux/$repo/os/$arch' > /etc/pacman.d/mirrorlist
	cat /etc/pacman.d/mirrorlist.backup >> /etc/pacman.d/mirrorlist
	pacman -Syu --noconfirm pacman-mirrorlist
	pacman -Syyu
fi

# Get all the dependencies for mgmt.
make deps

# Build it!
make || exit 1

# Store the output.
# TODO: is this required?
mv mgmt $BUILDDIR

# Get the releases directory path.
releases_path=$(make releases_path)	# It captures any other output, careful!
if [ "$releases_path" = "" ]; then
	echo "Releases path is unknown."
	exit 1
fi
mkdir -p "$releases_path"	# Ensure it exists.

echo "The releases_path is: ${releases_path}."

# Build the package for the distribution that we're in.
if [ -e "/etc/redhat-release" ]; then
	# TODO: differentiate between Fedora and CentOS
	make release_rpm
	typ='rpm'
elif [ -e "/etc/debian_version" ]; then
	# TODO: differentiate between Debian and Ubuntu
	make release_deb
	typ='deb'
elif [ -e "/etc/arch-release" ]; then
	make release_pacman
	typ='pacman'
else
	echo "OS family is unknown."
	exit 1
fi
echo "The release type is: ${typ}."

# Store releases.
mv "$releases_path${typ}/" $BUILDDIR	# mv releases/$(VERSION)/rpm/ $BUILDDIR

echo "Done mkosi build!"
